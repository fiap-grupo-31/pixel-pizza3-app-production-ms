name: Implantação Aplicação - Production em AWS EKS

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master

env: 
  AWS_REGION: us-east-1
  ECR_REPOSITORY: fiap-pixels-production
  SHORT_SHA: $(echo ${{ github.sha }} | cut -c 1-8)

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout do repositório
      uses: actions/checkout@v2

    - name: Efetua instalação de dependências
      run: |
        npm install

    - name: Executa teste da aplicação
      run: |
        npm run test

  run-sonarqube:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs:
      - run-tests

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v2
  
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        continue-on-error: false
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs:
      - run-tests
    #  - run-sonar

    steps:
    - name: Checkout do repositório
      uses: actions/checkout@v2

    - name: Configurando a AWS Credentials Action para o GitHub Actions
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}
      
    - name: Login em Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Instala dependencias
      run: |
        npm install

    - name: Gera versão de distribuição
      run: |
        npm run build

    - name: Build do Dockerfile, criação da Tag e Push Image em Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker image build \
        --tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest \
        --tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.SHORT_SHA }} \
        .
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.SHORT_SHA }}
        echo ${{ steps.login-ecr.outputs.registry }}

    - name: Instala e Configura Kubectl
      run: |
        VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
        # https://github.com/aws/aws-cli/issues/6920#issuecomment-1117981158
        VERSION=v1.23.6
        curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
          --progress-bar \
          --location \
          --remote-name
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        aws eks update-kubeconfig --name Fiap_Pixels-Eks

    - name: Instala o Helm e Instala o kong no kubernets (caso ele já exista não instala)
      run: |
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
        helm repo add kong https://charts.konghq.com
        helm repo update
        if ! helm install kong kong/kong --namespace kong --values ./values.yaml; then
          echo "Helm install failed, continuing..."
          exit 0
        fi

    - name: Obtem ENDPOINTS e Trata ConfigMap e arquivos de deployment
      run: |
        export ENDPOINT_DB=$(aws rds describe-db-instances --query "DBInstances[?DBInstanceIdentifier == 'fiap-productiondb'].Endpoint.Address" --output text)
        echo $ENDPOINT_DB
        export ENDPOINT_ECR=$(aws ecr describe-repositories --repository-names fiap-pixels-production --query 'repositories[0].repositoryUri' --output text)
        echo $ENDPOINT_ECR
        export ENDPOINT_KONG=$(kubectl get svc -n kong -o=jsonpath='{range .items[?(@.metadata.name=="kong-kong-proxy")]}{.status.loadBalancer.ingress[0].hostname}{"\n"}{end}')
        echo $ENDPOINT_KONG
        cp k8s/configmap.tmpl.yaml k8s/configmap.yaml
        sed -i 's|REPLACE_DB_STRING_CLOUD|'"$ENDPOINT_DB"'|g' k8s/configmap.yaml
        sed -i 's|REPLACE_ROUTE_APIGATEWAY|'"$ENDPOINT_KONG"'|g' k8s/configmap.yaml
        cat k8s/configmap.yaml
        cp k8s/deployment.tmpl.yaml k8s/deployment.yaml
        sed -i 's|ENDPOINT_ECR|'"$ENDPOINT_ECR"'|g' k8s/deployment.yaml
        cat k8s/deployment.yaml

    - name: Deploy da aplicação em EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        export ECR_REPOSITORY=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
        export IMAGE_TAG=${{ env.SHORT_SHA }}
        envsubst < k8s/kustomization.tmpl.yaml > k8s/kustomization.yaml
        kubectl kustomize k8s | kubectl apply -f -